{"ast":null,"code":"var _jsxFileName = \"/home/staj/Desktop/OwaspZAP Rest Application/owaspzap/src/main/ui/src/components/table/Table.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './table.css';\nimport ScanService from \"../../service/ScanService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst componentDidMount = () => {\n  ScanService.getScans().then(response => {\n    this.setState({\n      scans: response.data\n    });\n  });\n};\n\nconst Table = props => {\n  _s();\n\n  const initDataShow = props.limit && props.bodyData ? props.bodyData.slice(0, Number(props.limit)) : props.bodyData;\n  const [dataShow, setDataShow] = useState(initDataShow);\n  let pages = 1;\n  let range = [];\n\n  if (props.limit !== undefined) {\n    let page = Math.floor(props.bodyData.length / Number(props.limit));\n    pages = props.bodyData.length % Number(props.limit) === 0 ? page : page + 1;\n    range = [...Array(pages).keys()];\n  }\n\n  const [currPage, setCurrPage] = useState(0);\n\n  const selectPage = page => {\n    const start = Number(props.limit) * page;\n    const end = start + Number(props.limit);\n    setDataShow(props.bodyData.slice(start, end));\n    setCurrPage(page);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [props.headData && props.renderHead ? /*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: props.headData.map((item, index) => props.renderHead(item, index))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 29\n        }, this) : null, props.bodyData && props.renderBody ? /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: dataShow.map((item, index) => props.renderBody(item, index))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 29\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), pages > 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table__pagination\",\n      children: range.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `table__pagination-item ${currPage === index ? 'active' : ''}`,\n        onClick: () => selectPage(index),\n        children: item + 1\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 33\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }, this) : null, this.state.scans.map(scan => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 29\n      }, this)\n    }, scan.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Table, \"bVZ3J9Iu42dW4f6SesSpBIIDjcM=\");\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/home/staj/Desktop/OwaspZAP Rest Application/owaspzap/src/main/ui/src/components/table/Table.jsx"],"names":["React","useState","ScanService","componentDidMount","getScans","then","response","setState","scans","data","Table","props","initDataShow","limit","bodyData","slice","Number","dataShow","setDataShow","pages","range","undefined","page","Math","floor","length","Array","keys","currPage","setCurrPage","selectPage","start","end","headData","renderHead","map","item","index","renderBody","state","scan","id"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\n\nimport './table.css'\nimport ScanService from \"../../service/ScanService\";\n\nconst componentDidMount = () => {\n    ScanService.getScans().then((response) => {\n        this.setState({ scans:response.data})\n    });\n}\n\nconst Table = props => {\n\n    const initDataShow = props.limit && props.bodyData ? props.bodyData.slice(0, Number(props.limit)) : props.bodyData\n\n    const [dataShow, setDataShow] = useState(initDataShow)\n\n    let pages = 1\n\n    let range = []\n\n    if (props.limit !== undefined) {\n        let page = Math.floor(props.bodyData.length / Number(props.limit))\n        pages = props.bodyData.length % Number(props.limit) === 0 ? page : page + 1\n        range = [...Array(pages).keys()]\n    }\n\n    const [currPage, setCurrPage] = useState(0)\n\n    const selectPage = page => {\n        const start = Number(props.limit) * page\n        const end = start + Number(props.limit)\n\n        setDataShow(props.bodyData.slice(start, end))\n\n        setCurrPage(page)\n    }\n\n    return (\n        <div>\n            <div className=\"table-wrapper\">\n                <table>\n                    {\n                        props.headData && props.renderHead ? (\n                            <thead>\n                                <tr>\n                                    {\n                                        props.headData.map((item, index) => props.renderHead(item, index))\n                                    }\n                                </tr>\n                            </thead>\n                        ) : null\n                    }\n                    {\n                        props.bodyData && props.renderBody ? (\n                            <tbody>\n                                {\n                                    dataShow.map((item, index) => props.renderBody(item, index))\n                                }\n                            </tbody>\n                        ) : null\n                    }\n                </table>\n            </div>\n            {\n                pages > 1 ? (\n                    <div className=\"table__pagination\">\n                        {\n                            range.map((item, index) => (\n                                <div key={index} className={`table__pagination-item ${currPage === index ? 'active' : ''}`} onClick={() => selectPage(index)}>\n                                    {item + 1}\n                                </div>\n                            ))\n                        }\n                    </div>\n                ) : null\n            }\n            {\n                this.state.scans.map(\n                    scan =>\n                        <tr key={scan.id}>\n                            <td></td>\n                        </tr>\n                )\n            }\n        </div>\n    )\n}\n\nexport default Table\n"]},"metadata":{},"sourceType":"module"}